#lang r5rs
; common
(define (accumulate op nv a b term next)
    (if (> a b)
        nv
        (op 
            (term a)
            (accumulate op (op nv (term a)) (next a) b term next))))

(define (accumulate-i op nv a b term next)
    (if (> a b)
        nv
        (accumulate-i op (op nv (term a)) (next a) b term next)))

(define (foldl op nv l)
    (if (null? l)
        nv
        (foldl op (op nv (car l)) (cdr l))))

(define (foldr op nv l)
    (if (null? l)
        nv
        (op (car l) (foldr op (op nv (car l)) (cdr l)))))

(define (filter p l)
    (cond 
        ((null? l) l)
        ((p (car l)) (cons (car l) (filter p (cdr l))))
        (else (filter p (cdr l)))))

(define (map f l)
    (if (null? l)
        l
        (cons (f (car l)) (map (cdr l)))))

(define (++ n)
    (+ 1 n))

(define (id n)
    n)


;; 1
(define (argmin f a b)
    (accumulate (lambda (first second)(min first second)) (f a) a b (lambda (i)(f i)) ++))
